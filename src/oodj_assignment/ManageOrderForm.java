/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oodj_assignment;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Admin
 */
public class ManageOrderForm extends javax.swing.JFrame{

    DefaultTableModel mymodel;
    /**
     * Creates new form ManageOrderForm
     */
    public ManageOrderForm() {
        initComponents();
        setVisible(true);
        disableBtn();
        setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        setResizable(false);
        setTitle("Manage Order");
        styleTable();
        fillOrderTable();
        // Set icon jframe icon
        URL iconURL = getClass().getResource("/img/main_icon.jpg");
        ImageIcon icon = new ImageIcon(iconURL);
        setIconImage(icon.getImage());
        /* center the jframe form */
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Jpanel = new javax.swing.JPanel();
        lblOrderId = new javax.swing.JLabel();
        lblDateTime = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtDateTime = new javax.swing.JTextField();
        txtOrderId = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtDimensionsL = new javax.swing.JTextField();
        lblPassword1 = new javax.swing.JLabel();
        lblPassword2 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        lblDimensions = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblPickupDate = new javax.swing.JLabel();
        datePickup = new datechooser.beans.DateChooserCombo();
        txtDimensionsW = new javax.swing.JTextField();
        txtDimensionsH = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSenderAddress = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtRecipientAddress = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Jpanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblOrderId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblOrderId.setText("OrderId");

        lblDateTime.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblDateTime.setText("Date time");

        lblPassword.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblPassword.setText("Sender Address");

        txtDateTime.setEditable(false);

        txtOrderId.setEditable(false);

        btnSave.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtDimensionsL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDimensionsLKeyTyped(evt);
            }
        });

        lblPassword1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblPassword1.setText("Recipient Address");

        lblPassword2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblPassword2.setText("Status");

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblDimensions.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblDimensions.setText("Dimensions");

        lblWeight.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblWeight.setText("Weight");

        txtWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtWeightKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel3.setText("KG");

        lblPickupDate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblPickupDate.setText("Pick Up Date");

        try {
            datePickup.setDefaultPeriods(new datechooser.model.multiple.PeriodSet());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }

        txtDimensionsW.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDimensionsWKeyTyped(evt);
            }
        });

        txtDimensionsH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDimensionsHKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("X");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("X");

        txtPrice.setEditable(false);

        lblPrice.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblPrice.setText("Price");

        txtSenderAddress.setColumns(20);
        txtSenderAddress.setRows(5);
        txtSenderAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSenderAddressKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtSenderAddress);

        txtRecipientAddress.setColumns(20);
        txtRecipientAddress.setRows(5);
        txtRecipientAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRecipientAddressKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(txtRecipientAddress);

        javax.swing.GroupLayout JpanelLayout = new javax.swing.GroupLayout(Jpanel);
        Jpanel.setLayout(JpanelLayout);
        JpanelLayout.setHorizontalGroup(
            JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JpanelLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JpanelLayout.createSequentialGroup()
                        .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDimensions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPassword1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(lblPassword2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDateTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOrderId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPickupDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(114, 114, 114)
                        .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboStatus, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDateTime, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtOrderId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JpanelLayout.createSequentialGroup()
                                .addComponent(txtWeight)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addComponent(datePickup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(JpanelLayout.createSequentialGroup()
                                .addComponent(txtDimensionsL, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDimensionsW, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDimensionsH))
                            .addComponent(txtPrice)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        JpanelLayout.setVerticalGroup(
            JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblOrderId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtOrderId, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JpanelLayout.createSequentialGroup()
                        .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(lblPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JpanelLayout.createSequentialGroup()
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDimensions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDimensionsH, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(txtDimensionsW)
                    .addComponent(txtDimensionsL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPickupDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(datePickup, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(JpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setText("Manage Orders");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        jLabel2.setText("Search For Order ID");

        jTable1.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jTable1.setIntercellSpacing(new java.awt.Dimension(0, 0));
    jTable1.setRowHeight(30);
    jScrollPane1.setViewportView(jTable1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(Jpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(19, 19, 19))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel2)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1)
            .addGap(468, 468, 468))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(Jpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
        // Input validations
        InputValidator iv = new InputValidator();
        // Check empty
        if(iv.isEmpty(txtSenderAddress.getText()) 
                || iv.isEmpty(txtRecipientAddress.getText()) 
                || iv.isEmpty(txtDimensionsL.getText()) 
                || iv.isEmpty(txtDimensionsW.getText()) 
                || iv.isEmpty(txtDimensionsH.getText()) 
                || iv.isEmpty(txtWeight.getText()) 
                || iv.isEmpty(datePickup.getText())) {

            JOptionPane.showMessageDialog(
                    rootPane, 
                    "SenderAddress, ReceipientAddress, Pickup Date, Dimensions or weight is empty", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE
            );
        }// Check numeric
        else if(!iv.isNumericOnly(txtDimensionsL.getText()) 
                || !iv.isNumericOnly(txtDimensionsW.getText())
                || !iv.isNumericOnly(txtDimensionsH.getText()) 
                || !iv.isNumericOnly(txtWeight.getText())){
               
            JOptionPane.showMessageDialog(rootPane, "Dimensions or Weight inputs is invalid", "Error", JOptionPane.ERROR_MESSAGE);
        }else {
            
             // Dialog prompt to confirm price changes
            if (Double.parseDouble(txtPrice.getText()) != calPrice()){
                int option = JOptionPane.showConfirmDialog(rootPane,"The Price will be updated to: " + calPrice());  
                    if(option == JOptionPane.YES_OPTION){  
                        txtPrice.setText(String.valueOf(calPrice())); 
                        saveOrder();                       
                    } 
            } else {
                saveOrder();
            }
        }


       
                  
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearText();
        disableBtn();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        searchOrder();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == 10){
            searchOrder();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int a=JOptionPane.showConfirmDialog(rootPane,"Are you sure you want to delete this order?");  
        if(a==JOptionPane.YES_OPTION){  
            deleteOrder();
        }  
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSenderAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSenderAddressKeyTyped
        // TODO add your handling code here:
        GlobalMethods.noPipeText(txtSenderAddress, evt);
    }//GEN-LAST:event_txtSenderAddressKeyTyped

    private void txtRecipientAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRecipientAddressKeyTyped
        // TODO add your handling code here:
        GlobalMethods.noPipeText(txtRecipientAddress, evt);
    }//GEN-LAST:event_txtRecipientAddressKeyTyped

    private void txtDimensionsLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDimensionsLKeyTyped
        // TODO add your handling code here:
        GlobalMethods.numericOnlyText(txtDimensionsL, evt);
    }//GEN-LAST:event_txtDimensionsLKeyTyped

    private void txtDimensionsWKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDimensionsWKeyTyped
        // TODO add your handling code here:
        GlobalMethods.numericOnlyText(txtDimensionsW, evt);
    }//GEN-LAST:event_txtDimensionsWKeyTyped

    private void txtDimensionsHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDimensionsHKeyTyped
        // TODO add your handling code here:
        GlobalMethods.numericOnlyText(txtDimensionsH, evt);
    }//GEN-LAST:event_txtDimensionsHKeyTyped

    private void txtWeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWeightKeyTyped
        // TODO add your handling code here:
        GlobalMethods.numericOnlyText(txtWeight, evt);
    }//GEN-LAST:event_txtWeightKeyTyped
    
    private void searchOrder() {
        boolean dataFound = false;
        
        try(BufferedReader br = new BufferedReader(new FileReader("txtfiles/Orders.txt"))){
            
            Object records[] = br.lines().toArray();
            for(int index=0; index<records.length; index++){
                String eachline = records[index].toString();
                String DataRow[] = eachline.split("\\|");
                
                if(txtSearch.getText().equals(DataRow[0])) {
                    
                    txtOrderId.setText(DataRow[0]);
                    txtDateTime.setText(DataRow[2]);
                    txtPrice.setText(DataRow[3]);
                    txtSenderAddress.setText(DataRow[5]);
                    txtRecipientAddress.setText(DataRow[7]);
                    txtDimensionsL.setText(DataRow[8].split("x")[0]);
                    txtDimensionsW.setText(DataRow[8].split("x")[1]);
                    txtDimensionsH.setText(DataRow[8].split("x")[2]);
                    txtWeight.setText(DataRow[9]);

                    /* Convert string to date and calendar format */
                    /* To set it in date chooser component */
                    java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(DataRow[10]);
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(date);    
                    datePickup.setSelectedDate(cal);
                                       
                    comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
                        "Unpaid", 
                        "Awaiting Confirmation", 
                        "Awaiting Pick Up", 
                        "Picked Up", 
                        "Out For Delivery", 
                        "Delievered"}));
                    comboStatus.setSelectedItem(DataRow[11]);
                    
                    JOptionPane.showMessageDialog(rootPane, "Result Found !!", "Result", JOptionPane.INFORMATION_MESSAGE);
                    dataFound = true;                   
                    break;  
                } 

            }
            
            if(dataFound == false) {
                JOptionPane.showMessageDialog(rootPane, "Result Not Found !!", "Alert", JOptionPane.WARNING_MESSAGE);
            }else {
                enableBtn();
            }
            
        } catch(Exception ex) {
            System.out.print(ex);
        }
    }
    
    private double calPrice(){
        DecimalFormat df = new DecimalFormat("#.00");       //Limit to 2 decimal places only 
        oodj_assignment.Dimension dim = new oodj_assignment.Dimension(
                Double.parseDouble(txtDimensionsL.getText()), 
                Double.parseDouble(txtDimensionsW.getText()), 
                Double.parseDouble(txtDimensionsH.getText())
        );
        Order ord = new Order();   
        double weight = Double.parseDouble(txtWeight.getText());

        return Double.parseDouble(df.format(ord.calcPrice(dim, weight)));
    }
    
    private void styleTable() {
        jTable1.getTableHeader().setFont(new Font("Cambria", Font.BOLD, 16));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(32, 136, 203));
        jTable1.getTableHeader().setForeground(Color.white);
        jTable1.getTableHeader().setPreferredSize(new Dimension(0,40));

    }
    
    private void clearText() {
        txtSearch.setText("");
        txtOrderId.setText("");
        txtDateTime.setText("");
        txtSenderAddress.setText("");
        txtRecipientAddress.setText("");
        txtPrice.setText("");
        txtDimensionsL.setText("");
        txtDimensionsW.setText("");
        txtDimensionsH.setText("");
        txtWeight.setText("");
        datePickup.setSelectedDate(null);
        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {""}));
        comboStatus.setSelectedItem("");
    }
    
    private void fillOrderTable() {
        //fill table with column name
        String []columnNames = {"Oder ID","Order DateTime","Price (RM)","Sender Name","Dimensions (CM)","Weight", "Status"};
        mymodel = (DefaultTableModel) jTable1.getModel();
        mymodel.setColumnIdentifiers(columnNames); 
        //display columnnames on jtable
        mymodel.setRowCount(0);            
        jTable1.revalidate();

        try(BufferedReader br = new BufferedReader(new FileReader("txtfiles/Orders.txt")))
        {    

            Object records[] = br.lines().toArray();
            for(int index=0; index < records.length; index++){
                String eachline = records[index].toString();
                String row[] = eachline.split("\\|");
                String datarow[] = {row[0],row[2],row[3],row[4],row[8],row[9],row[11]};

                mymodel.addRow(datarow);

            }

            /* Cleanup code */
            br.close();

        }
        catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e, "Error", JOptionPane.INFORMATION_MESSAGE);
        }
              
    }
    
    private void disableBtn(){
        btnSave.setEnabled(false);
        btnClear.setEnabled(false);
        btnDelete.setEnabled(false);
    }
    
    private void enableBtn(){
        btnSave.setEnabled(true);
        btnClear.setEnabled(true);
        btnDelete.setEnabled(true);
    }
    
    private void saveOrder() {
        String tempFile = "txtfiles/temp.txt";
        String filepath = "txtfiles/Orders.txt";
        File oldFile = new File(filepath);
        File newFile = new File(tempFile);
        FileWriter fw = null;
        PrintWriter pws = null;
        
        try(BufferedReader br = new BufferedReader(new FileReader("txtfiles/Orders.txt")))
        {
            fw = new FileWriter(tempFile,true);
            pws = new PrintWriter(fw);      
           
            Object records[] = br.lines().toArray();
            for(int index=0; index < records.length; index++){
                String eachline = records[index].toString();
                String DataRow[] = eachline.split("\\|");

                
                if(txtOrderId.getText().equals(DataRow[0])) {

                    pws.println(DataRow[0] + "|"
                            + DataRow[1] + "|" 
                            + DataRow[2] + "|"
                            + txtPrice.getText() + "|"
                            + DataRow[4] + "|" 
                            + txtSenderAddress.getText() + "|" 
                            + DataRow[6] + "|" 
                            + txtRecipientAddress.getText() + "|" 
                            + txtDimensionsL.getText() + "x" + txtDimensionsW.getText() + "x" + txtDimensionsH.getText() + "|"  
                            + txtWeight.getText() + "|"
                            + datePickup.getText() + "|"
                            + comboStatus.getSelectedItem() + "|"
                            + DataRow[12] + "|"
                            + DataRow[13]);
                 
                }    
                else {
                    pws.println(eachline);
//                    pws.println(DataRow[0] + "|" + DataRow[1] 
//                            + "|" + DataRow[2] + "|" + DataRow[3] + "|" + DataRow[4] 
//                            + "|" + DataRow[5] + "|" + DataRow[6]+ "|" + DataRow[7] 
//                            + "|" + DataRow[8] + "|" + DataRow[9]+ "|" + DataRow[10]);
                }
            }
            
            /* Cleanup code */
            pws.flush();
            pws.close(); 
            br.close();
            try {
                fw.close();
            } catch (Exception ex){
                JOptionPane.showMessageDialog(rootPane, ex , "Error", JOptionPane.WARNING_MESSAGE);
            }
            /* End of cleanup code */

            if (oldFile.exists()){oldFile.delete();}    //Delete old file if exist
            File dump = new File(filepath);
            newFile.renameTo(dump);
            

            JOptionPane.showMessageDialog(rootPane, "Order File Updated", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearText();
            disableBtn();
   
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e, "Error", JOptionPane.INFORMATION_MESSAGE);
        }

        fillOrderTable(); // Refill the table
        
    }
    
    private void deleteOrder(){
        String tempFile = "txtfiles/temp.txt";
        String filepath = "txtfiles/Orders.txt";
        File oldFile = new File(filepath);
        File newFile = new File(tempFile);
        FileWriter fw = null;
        PrintWriter pws = null;
        
        try(BufferedReader br = new BufferedReader(new FileReader("txtfiles/Orders.txt")))
        {
            fw = new FileWriter(tempFile,true);
            pws = new PrintWriter(fw);      
           
            Object records[] = br.lines().toArray();
            for(int index=0; index < records.length; index++){
                String eachline = records[index].toString();
                String DataRow[] = eachline.split("\\|");
                
                if(!txtOrderId.getText().equals(DataRow[0])) {
                    pws.println(eachline);
//                    pws.println(DataRow[0] + "|" + DataRow[1] 
//                            + "|" + DataRow[2] + "|" + DataRow[3] + "|" + DataRow[4] 
//                            + "|" + DataRow[5] + "|" + DataRow[6]+ "|" + DataRow[7] 
//                            + "|" + DataRow[8] + "|" + DataRow[9]+ "|" + DataRow[10]);
                }    
                
            }

            JOptionPane.showMessageDialog(rootPane, "Order Deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearText();
            disableBtn();
   
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e, "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        finally {
            if (fw != null){
                try {
                    fw.close();
                } catch (Exception ex){
                    JOptionPane.showMessageDialog(rootPane, ex , "Error", JOptionPane.WARNING_MESSAGE);
                }
            }
            
            if (pws != null) {
                pws.flush();
                pws.close(); 
            }
        }
        
        if (oldFile.exists()){oldFile.delete();}    //Delete old file if exist
        File dump = new File(filepath);
        newFile.renameTo(dump);
        fillOrderTable(); // Refill table
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Jpanel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboStatus;
    private datechooser.beans.DateChooserCombo datePickup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblDateTime;
    private javax.swing.JLabel lblDimensions;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPassword1;
    private javax.swing.JLabel lblPassword2;
    private javax.swing.JLabel lblPickupDate;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTextField txtDateTime;
    private javax.swing.JTextField txtDimensionsH;
    private javax.swing.JTextField txtDimensionsL;
    private javax.swing.JTextField txtDimensionsW;
    private javax.swing.JTextField txtOrderId;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextArea txtRecipientAddress;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextArea txtSenderAddress;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
